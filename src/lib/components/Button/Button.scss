@use "../../styles/utils" as *;
@use "../../styles/theme" as *;
@use "../../styles/v" as *;
@use "sass:list";
@use "sass:map";
////
//// @group Button
/// ### Exposed Button settings
/// #### component selector: `.btn`
////

$paddings: assignSizes((4pt 12pt, 8pt 16pt, 8pt 20pt));
$font-sizes: assignSizes((12pt, 14pt, 16pt));
$heights: assignSizes((24pt, 32pt, 40pt));

$prefix: $main-prefix + "-button-";

/// text color
///
/// CSS Variable: `--desu-button-color`
$color: var(--#{$prefix}color, $color-neutral-max);

/// Background of Buttons
///
/// CSS Variable: `--desu-button-background`
$background: var(--#{$prefix}background, $color-primary);

/// background color when hover
///
/// CSS Variable: `--desu-button-background-hover`
$background-hover: var(--#{$prefix}background-hover, $color-primary-1);

/// background color when clicked
///
/// CSS Variable: `--desu-button-background-active`
$background-active: var(--#{$prefix}background-active, $color-primary-2);

.btn {
  @extend %button-reset;
  background: $background;
  color: $color;

  &:hover {
    background: $background-hover;
  }
  &:active {
    background: $background-active;
  }
  &:focus-visible {
    outline-offset: -3pt;
    outline: 1px solid $color;
  }
  @each $size in $sizeKeys {
    &--#{$size} {
      padding: map.get($paddings, $size);
      font-size: map.get($font-sizes, $size);
      height: map.get($heights, $size);
    }
  }
}
